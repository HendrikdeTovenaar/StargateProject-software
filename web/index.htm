<!--
*******************************************************************
***   Kristian's Stargate Project - TheStargateProject.com      ***
*******************************************************************
***                                                             ***
***   Original Software written by Kristian Tysse               ***
***   Restructuring and Development by Jonathan Moyes           ***
***                                                             ***
*******************************************************************
-->

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="author" content="Jonathan Moyes">
    <link rel="shortcut icon" type="image/x-icon" href="img/favicon.ico"/>

    <title>Stargate Command</title>

    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="lib/jquery-ui-1.13.0.custom/jquery-ui.css">
    <link href="lib/bootstrap-4.0.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <script type="text/javascript" src="lib/jquery-3.3.1.min.js"></script>
    <script type="text/javascript" src="lib/jquery-ui-1.13.0.custom/jquery-ui.js"></script>
    <script type="text/javascript" src="lib/moment.js"></script>

    <!-- Custom styles for this template -->
    <link rel="stylesheet" href="main.css" />

  </head>

  <body>

    <script type="text/javascript" >

      // Configuration
      var poll_delay_default = 5000
      var poll_delay_offline = 500

      // State variables
      var poll_delay = poll_delay_default

      var offline_modal = $('<div id="offline-modal" title="Stargate is Offline"><span id="dialogMsg">Unable to communicate with the Stargate. <br><br>Ensure that the Stargate software is running.</span></div>');
      offline_modal.dialog({
      		autoOpen: false,
      		modal: true,
      		dialogClass: "no-close",
      });

      $( function() {
        doPoll();
        updateInfo();
      }); // End of on-ready function

      var is_online = true
      function doPoll( singleShot = false ){
        $.get('stargate/get/is_alive')
          .done(function(data) {
            // Hide the offline modal
            hideOfflineModal()

            // If we're recovering from being offline, refresh
            if (!is_online){
              updateInfo()
            }
            is_online = true

            poll_delay = poll_delay_default

            // Schedule the next polling
            if ( !singleShot ){
              setTimeout(function(){doPoll( false ); }, poll_delay);
            }
          })
          .fail(function(jqXHR, textStatus, errorThrown) {
            // Show the "we're offline modal"
            showOfflineModal()
            is_online = false


            // Slow the polling rate to default
            poll_delay = poll_delay_offline

            // Schedule the next polling
            if ( !singleShot ){
              setTimeout(function(){doPoll( false ); }, poll_delay);
            }
          }); // End $.get
      }

      function updateInfo(){

        $.ajax({
            url: '/stargate/get/config',
            success: function (response) {
              var trHTML = '';
              $.each(response, function (paramName, item) {
                  paramPrettyName = toProperCase(paramName)
                  trHTML += getHTMLTableRow(paramName, paramPrettyName, item)
              });
              $('#records_table').html("\
                  <tr>\
                      <th>Name</th>\
                      <th>Value</th>\
                      <th>Units</th>\
                      <th>Description</th>\
                  </tr>");

              $('#records_table').append(trHTML);

              initFormSubmitHandler()

            }
        });
      }

      function getHTMLTableRow(paramName, paramPrettyName, data){
        inputField = getHTMLField( paramName, data )
        if (!data.units) data.units = ""
        return '<tr><td>' + paramPrettyName + '</td><td>' + inputField + '</td><td>' + data.units + '</td><td>' + data.desc + '</td></tr>';
      }

      function getHTMLField( paramName, data ){
        switch( data.type ){
          case "bool":
            return getHTMLBool( paramName, data )
          case "int":
            return getHTMLInt( paramName, data )
          case "float":
            return getHTMLFloat( paramName, data )
          case "str":
            return getHTMLString( paramName, data )
          case "str-datetime":
              return getHTMLDateTime( paramName, data )
          case "str-enum":
              return getHTMLStringEnum( paramName, data )
          case "str-ip":
              return getHTMLStringIPAddress( paramName, data )
          default:
            // If a type isn't specified, just print the raw value without a field
            return data.value
        }
      }

      function getHTMLBool( paramName, data ){
        if ( data.protected ) return data.value

        if ( data.value ){
          valueTrue = " SELECTED"
          valueFalse = ""
        }
        else{
          valueTrue = ""
          valueFalse = " SELECTED"
        }
        return "\
            <select name='" + paramName + "'>\
              <option value='true' " + valueTrue + ">True</option>\
              <option value='false' " + valueFalse + ">False</option>\
            </select>"

      }

      function getHTMLInt( paramName, data ){
        if ( data.protected ) return data.value
        return "<input type='number' name='" + paramName + "' value='" + data.value + "' step='1' min='" + data.min_value + "' max='" + data.max_value + "'>"
      }

      function getHTMLFloat( paramName, data ){
        if ( data.protected ) return data.value
        return "<input type='number' name='" + paramName + "' value='" + data.value + "' step='0.001' min='" + data.min_value + "' max='" + data.max_value + "'>"
      }

      function getHTMLString( paramName, data ){
        if ( data.protected ) return data.value
        return "<input type='text' name='" + paramName + "' value='" + data.value + "'>"
      }

      function getHTMLStringIPAddress( paramName, data ){
        if ( data.protected ) return data.value
        return "<input type='text' name='" + paramName + "' value='" + data.value + "'>"
      }

      function getHTMLStringEnum( paramName, data ){
        if ( data.protected ) return data.value
        html = "<select name='" + paramName + "'>"
        $.each(data.enum_values, function (index, value) {
          selected = ""
          if( value == data.value ) selected = " SELECTED"
          html += "<option value='" + value + "'" + selected + ">" + toProperCase(value) + "</option>"
        })
        html += "</select>"
        return html
      }

      function getHTMLDateTime( paramName, data ){
        now = moment()
        then = moment(data.value)
        return then.from(now);
      }

      function toProperCase(str){
        str = str.replace(/_/g, " "); // Replace underscores with spaces

        const abbrv = [ "DHD", "HTTP", "API", "IP", "URL", "LED" ]
        // Capitalize first letter of each word
        const words = str.split(" ");
        for (let i = 0; i < words.length; i++) {
            // If this is a common abbreviation, Capitalize the whole thing
            if ( abbrv.includes(words[i].toUpperCase()) ){
                words[i] = words[i].toUpperCase()
            }
            else{
              words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }
        }
        return words.join(" ");
      }

      function showOfflineModal(){
        offline_modal.dialog("open");
      }

      function hideOfflineModal(){
        offline_modal.dialog("close");
      }

      var form_is_init = false
      function initFormSubmitHandler(){
        if( !form_is_init ){
          form_is_init = true
          $("#config").submit(function(e) {

              // Execution of the normal/non-jquery form submission.
              e.preventDefault();
              e.stopPropagation();

              var form = $(this);

              // TODO: We need to re-pack the dict-type values
              data = getFormDataJson(form)

              $.ajax({
                  type: "POST",
                  url: 'stargate/update/config',
                  dataType : 'json',
                  data: data, // serializes and JSON encodes the form's elements.
                  success: function(data)
                  {
                    dialogConfig = {
                      modal: true,
                      title: "",
                      buttons: [
                        {
                          text: "Ok",
                          click: function() {
                            $( this ).dialog( "close" );
                          }
                        }
                      ],
                      position: {
                        my: "center",
                        at: "center",
                        of: window,
                        collision: "none"
                      }
                    }
                    if( !data.success ){
                      dialogConfig['title'] = "Failed to Save Changes"
                      $("<div>" + data.message + "</div>").dialog(dialogConfig);
                    }
                    else{
                      dialogConfig['title'] = "Comtrya!"

                      if ( Object.entries(data.results).length > 0){
                        listHTML = data.message + "<br>"
                        listHTML += "<ul>"
                        console.log( )
                        for (const [key, value] of Object.entries(data.results)) {
                          console.log(value)
                          listHTML += "<li>" + toProperCase(key) + ": " + value + "</li>"
                        }

                        listHTML += "</ul>"
                      }
                      else{
                        listHTML = "No changes to be saved"
                      }

                      $("<div>" + listHTML + "</div>").dialog(dialogConfig);
                    }
                  },
                  error: function(data)
                  {
                    $("<div>An unknown error occurred</div>").dialog({
                          modal: true,
                          title: "ERROR",
                          buttons: [
                            {
                              text: "Ok",
                              click: function() {
                                $( this ).dialog( "close" );
                              }
                            }
                          ],
                          position: {
                            my: "center",
                            at: "center",
                            of: window,
                            collision: "none"
                          }
                        });
                  },
              });
          });
        }
      }

      function getFormDataJson(form){
        form = form.serializeArray();
        var data = {};
        $(form).each(function(index, obj){
          data[obj.name] = obj.value;
        });
        return JSON.stringify(data);
      }

    </script>

    <nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">
      <a class="navbar-brand" href="/">Stargate Command</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarsExampleDefault">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item">
            <a class="nav-link active" href="#">Home <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="address_book.htm">Address Book </a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Admin</a>
            <div class="dropdown-menu" aria-labelledby="dropdown01">
              <a class="dropdown-item" href="debug.htm">Testing / Debug</a>
              <a><hr></a>
              <a class="dropdown-item" href="config.htm">Configuration</a>
              <a class="dropdown-item" href="info.htm">System Information</a>
              <a><hr></a>
              <a class="dropdown-item" href="#">Restart Software</a>
              <a class="dropdown-item" href="#">Reboot Raspberry Pi</a>
              <a class="dropdown-item" href="#">Shutdown Raspberry Pi</a>
            </div>
          </li>
        </ul>
      </div>
    </nav>

    <img src="img/header.jpg" style="alignment: center" width="100%" alt="header_image">

    <main role="main" class="container">

      <div class="starter-template">

        <form id='config'>
          <input type="submit" value="Save Changes">
          <table id="records_table" border='1'></table>
          <input type="submit" value="Save Changes">
        </form>
        <hr />

      </div>

    </main><!-- /.container -->

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script>window.jQuery || document.write('<script src="/lib/bootstrap-4.0.0/assets/js/vendor/jquery-slim.min.js"><\/script>')</script>
    <script src="/lib/bootstrap-4.0.0/assets/js/vendor/popper.min.js"></script>
    <script src="/lib/bootstrap-4.0.0/dist/js/bootstrap.min.js"></script>
  </body>
</html>
